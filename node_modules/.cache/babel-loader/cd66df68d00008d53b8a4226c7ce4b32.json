{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\my-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\nconst API_KEY = \"057852d7aae043b2611ca7f87cbf09a0\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    this.gettingWeather = async e => {\n      e.preventDefault();\n      var city = e.target.elements.city.value;\n      const api_url = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n      const data = await api_url.json();\n\n      if (data.cod != 404) {\n        if (city) {\n          const api_url = await fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&appid=\").concat(API_KEY, \"&units=metric\"));\n          const data = await api_url.json();\n          console.log(data);\n          var sunset = data.sys.sunset;\n          var date = new Date();\n          date.setTime(sunset);\n          var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n          this.setState({\n            temp: data.main.temp,\n            city: data.name,\n            country: data.sys.country,\n            sunrise: data.sys.sunrise,\n            sunset: sunset_date,\n            error: undefined\n          });\n        } else {\n          this.setState({\n            temp: undefined,\n            city: undefined,\n            country: undefined,\n            sunrise: undefined,\n            sunset: undefined,\n            error: \"Введите название города!\"\n          });\n        }\n      } else {\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          sunrise: undefined,\n          sunset: undefined,\n          error: \"Такого города нет в базе!\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"okoshko\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-6 info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Info, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-sm-7 form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Form, {\n      weatherMethod: this.gettingWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      temp: this.state.temp,\n      city: this.state.city,\n      country: this.state.country,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\user\\my-app\\src\\App.js"],"names":["React","Info","Form","Weather","API_KEY","App","Component","state","temp","undefined","city","country","sunrise","sunset","error","gettingWeather","e","preventDefault","target","elements","value","api_url","fetch","data","json","cod","console","log","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","name","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY=\"057852d7aae043b2611ca7f87cbf09a0\";\r\n\r\nclass App extends React.Component{\r\n\r\n  state={\r\n    temp: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    error:undefined\r\n}\r\n\r\n  gettingWeather= async (e) => {\r\n    e.preventDefault();\r\n    var city = e.target.elements.city.value;\r\n    const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n    const data = await api_url.json();\r\n    if (data.cod != 404) {\r\n      if (city) {\r\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\r\n        const data = await api_url.json();\r\n        console.log(data);\r\n        var sunset = data.sys.sunset;\r\n        var date = new Date();\r\n        date.setTime(sunset);\r\n        var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n\r\n        this.setState({\r\n          temp: data.main.temp,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          sunrise: data.sys.sunrise,\r\n          sunset: sunset_date,\r\n          error: undefined\r\n        });\r\n      } else {\r\n        this.setState({\r\n          temp: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          sunrise: undefined,\r\n          sunset: undefined,\r\n          error: \"Введите название города!\"\r\n        });\r\n      }\r\n    }\r\n    else{\r\n      this.setState(\r\n          {\r\n            temp: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            sunrise: undefined,\r\n            sunset: undefined,\r\n            error: \"Такого города нет в базе!\"\r\n          }\r\n      );\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n        <div className=\"okoshko\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-6 info\">\r\n                  <Info />\r\n                </div>\r\n                <div className=\"col-sm-7 form\">\r\n                  <Form weatherMethod={this.gettingWeather}/>\r\n                  <Weather\r\n                  temp={this.state.temp}\r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n                  sunrise={this.state.sunrise}\r\n                  sunset={this.state.sunset}\r\n                  error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}